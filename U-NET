{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOyFoOlddBHQxmwAPGv76wZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ridash2005/Pancreati-Tumor-Segmentation/blob/main/U-NET\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torch torchvision matplotlib pydicom\n",
        "import zipfile, pydicom, io, numpy as np\n",
        "from PIL import Image\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from torchvision import transforms\n",
        "from sklearn.model_selection import train_test_split\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rjv1VNLvXaqi",
        "outputId": "c09e05e5-5c54-4da4-8055-8cf96f9a82d0"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: torch in /usr/local/lib/python3.12/dist-packages (2.8.0+cu126)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.12/dist-packages (0.23.0+cu126)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n",
            "Requirement already satisfied: pydicom in /usr/local/lib/python3.12/dist-packages (3.0.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.12/dist-packages (from torch) (3.19.1)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.12/dist-packages (from torch) (4.15.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.12/dist-packages (from torch) (75.2.0)\n",
            "Requirement already satisfied: sympy>=1.13.3 in /usr/local/lib/python3.12/dist-packages (from torch) (1.13.3)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.12/dist-packages (from torch) (3.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from torch) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.12/dist-packages (from torch) (2025.3.0)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.6.80 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.80)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.10.2.21 in /usr/local/lib/python3.12/dist-packages (from torch) (9.10.2.21)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.6.4.1 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.4.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.3.0.4 in /usr/local/lib/python3.12/dist-packages (from torch) (11.3.0.4)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.7.77 in /usr/local/lib/python3.12/dist-packages (from torch) (10.3.7.77)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.7.1.2 in /usr/local/lib/python3.12/dist-packages (from torch) (11.7.1.2)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.5.4.2 in /usr/local/lib/python3.12/dist-packages (from torch) (12.5.4.2)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.7.1 in /usr/local/lib/python3.12/dist-packages (from torch) (0.7.1)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.27.3 in /usr/local/lib/python3.12/dist-packages (from torch) (2.27.3)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12==12.6.85 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.85)\n",
            "Requirement already satisfied: nvidia-cufile-cu12==1.11.1.6 in /usr/local/lib/python3.12/dist-packages (from torch) (1.11.1.6)\n",
            "Requirement already satisfied: triton==3.4.0 in /usr/local/lib/python3.12/dist-packages (from torch) (3.4.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (from torchvision) (2.0.2)\n",
            "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.12/dist-packages (from torchvision) (11.3.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.59.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.12/dist-packages (from sympy>=1.13.3->torch) (1.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->torch) (3.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "import os, zipfile\n",
        "# Copy to Colab local for speed\n",
        "if not os.path.exists('/content/DCM.zip'):\n",
        "    !cp \"/content/drive/MyDrive/PIS/DCM.zip\" \"/content/DCM.zip\"\n",
        "\n",
        "zip_path = '/content/DCM.zip'\n",
        "z = zipfile.ZipFile(zip_path)\n",
        "\n",
        "# Find image slice paths\n",
        "img_slice_paths = [f for f in z.namelist()\n",
        "                   if f.startswith('DCM/Task1/ImagesTr/') and f.lower().endswith('.dcm')]\n",
        "\n",
        "# Extract all folder IDs (patients/volumes)\n",
        "folders = sorted(set(f.split('/')[3] for f in img_slice_paths))\n",
        "print(f'Folders found: {folders[:10]}... Total: {len(folders)}')\n",
        "\n",
        "# Pair up images and masks by basename within each folder\n",
        "img_files, lbl_files = [], []\n",
        "for folder in folders:\n",
        "    imgs = [f for f in img_slice_paths if f.startswith(f'DCM/Task1/ImagesTr/{folder}/IMG')]\n",
        "    lbls = [f for f in z.namelist() if f.startswith(f'DCM/Task1/LabelsTr/{folder}/IMG')]\n",
        "    img_dict = {os.path.basename(f): f for f in imgs}\n",
        "    lbl_dict = {os.path.basename(f): f for f in lbls}\n",
        "    for fname in img_dict:\n",
        "        if fname in lbl_dict:\n",
        "            img_files.append(img_dict[fname])\n",
        "            lbl_files.append(lbl_dict[fname])\n",
        "\n",
        "print(f'Total paired slices: {len(img_files)}')\n",
        "print('Sample image:', img_files[:3])\n",
        "print('Sample mask :', lbl_files[:3])\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gdw4kzwNYTCP",
        "outputId": "1d472d84-e1cd-4b65-c038-3749e526ebe6"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Folders found: ['10000', '10001', '10002', '10006', '10007', '10011', '10012', '10014', '10015', '10016']... Total: 92\n",
            "Total paired slices: 6816\n",
            "Sample image: ['DCM/Task1/ImagesTr/10000/IMG0001.dcm', 'DCM/Task1/ImagesTr/10000/IMG0002.dcm', 'DCM/Task1/ImagesTr/10000/IMG0003.dcm']\n",
            "Sample mask : ['DCM/Task1/LabelsTr/10000/IMG0001.dcm', 'DCM/Task1/LabelsTr/10000/IMG0002.dcm', 'DCM/Task1/LabelsTr/10000/IMG0003.dcm']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_imgs, val_imgs, train_lbls, val_lbls = train_test_split(\n",
        "    img_files, lbl_files, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "print(f'Train: {len(train_imgs)}, Val: {len(val_imgs)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Squ_2v7I7oVq",
        "outputId": "755e9a93-6a2a-4a93-d3f0-3b31861bd3b6"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train: 5452, Val: 1364\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np, pydicom, io\n",
        "from torch.utils.data import Dataset\n",
        "from torchvision import transforms\n",
        "from PIL import Image\n",
        "\n",
        "class ZipDicomSliceDataset(Dataset):\n",
        "    def __init__(self, zip_path, img_files, lbl_files, target_size=(256,256)):\n",
        "        self.zip_path = zip_path\n",
        "        self.img_files = img_files\n",
        "        self.lbl_files = lbl_files\n",
        "        self.target_size = target_size\n",
        "        self.to_tensor = transforms.ToTensor()\n",
        "        self.resize = transforms.Resize(self.target_size, interpolation=Image.NEAREST)\n",
        "\n",
        "    def __len__(self): return len(self.img_files)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        with zipfile.ZipFile(self.zip_path) as z:\n",
        "            img_bytes = z.read(self.img_files[idx])\n",
        "            mask_bytes = z.read(self.lbl_files[idx])\n",
        "        img_dcm = pydicom.dcmread(io.BytesIO(img_bytes))\n",
        "        mask_dcm = pydicom.dcmread(io.BytesIO(mask_bytes))\n",
        "        image = img_dcm.pixel_array.astype(np.float32)\n",
        "        image = (image - np.min(image)) / (np.max(image) - np.min(image) + 1e-7)\n",
        "        mask_arr = mask_dcm.pixel_array.astype(np.float32)\n",
        "        mask_bin = ((mask_arr == 1.0) | (mask_arr == 2.0)).astype(np.float32)\n",
        "        image = self.resize(Image.fromarray((image * 255).astype(np.uint8)))\n",
        "        mask = self.resize(Image.fromarray((mask_bin * 255).astype(np.uint8)))\n",
        "        image = self.to_tensor(image)\n",
        "        mask = self.to_tensor(mask)\n",
        "        mask = (mask > 0.5).float()\n",
        "        # Diagnostic print for the first few samples\n",
        "        if idx<3:\n",
        "            print(f\"Sample {idx}: image shape {image.shape}, mask unique {mask.unique().tolist()}\")\n",
        "        return image, mask\n"
      ],
      "metadata": {
        "id": "rWxlJnckpyBR"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from torch.utils.data import DataLoader\n",
        "\n",
        "train_loader = DataLoader(\n",
        "    ZipDicomSliceDataset(zip_path, train_imgs, train_lbls),\n",
        "    batch_size=16, shuffle=True, num_workers=0\n",
        ")\n",
        "val_loader = DataLoader(\n",
        "    ZipDicomSliceDataset(zip_path, val_imgs, val_lbls),\n",
        "    batch_size=16, shuffle=False, num_workers=0\n",
        ")\n",
        "\n",
        "# Check first batch shape\n",
        "imgs, masks = next(iter(train_loader))\n",
        "print(f\"Batch shape: {imgs.shape}, {masks.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SbzRkRqInQH3",
        "outputId": "bdb546ba-d402-478f-a8fb-952adffd6340"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Batch shape: torch.Size([16, 1, 256, 256]), torch.Size([16, 1, 256, 256])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "class DoubleConv(nn.Module):\n",
        "    def __init__(self, in_channels, out_channels):\n",
        "        super().__init__()\n",
        "        self.double_conv = nn.Sequential(\n",
        "            nn.Conv2d(in_channels, out_channels, 3, padding=1),\n",
        "            nn.BatchNorm2d(out_channels),\n",
        "            nn.ReLU(inplace=True),\n",
        "            nn.Conv2d(out_channels, out_channels, 3, padding=1),\n",
        "            nn.BatchNorm2d(out_channels),\n",
        "            nn.ReLU(inplace=True)\n",
        "        )\n",
        "    def forward(self, x):\n",
        "        return self.double_conv(x)\n",
        "\n",
        "class UNet(nn.Module):\n",
        "    def __init__(self, in_channels=1, out_channels=1, features=[64,128,256,512]):\n",
        "        super().__init__()\n",
        "        self.downs = nn.ModuleList()\n",
        "        self.ups = nn.ModuleList()\n",
        "        for feature in features:\n",
        "            self.downs.append(DoubleConv(in_channels, feature))\n",
        "            in_channels = feature\n",
        "        for feature in reversed(features):\n",
        "            self.ups.append(nn.ConvTranspose2d(feature*2, feature, 2, stride=2))\n",
        "            self.ups.append(DoubleConv(feature*2, feature))\n",
        "        self.bottleneck = DoubleConv(features[-1], features[-1]*2)\n",
        "        self.final_conv = nn.Conv2d(features[0], out_channels, 1)\n",
        "    def forward(self, x):\n",
        "        skip_connections = []\n",
        "        for down in self.downs:\n",
        "            x = down(x)\n",
        "            skip_connections.append(x)\n",
        "            x = F.max_pool2d(x, 2)\n",
        "        x = self.bottleneck(x)\n",
        "        skip_connections = skip_connections[::-1]\n",
        "        for idx in range(0, len(self.ups), 2):\n",
        "            x = self.ups[idx](x)\n",
        "            skip_conn = skip_connections[idx//2]\n",
        "            if x.shape != skip_conn.shape:\n",
        "                x = F.interpolate(x, size=skip_conn.shape[2:])\n",
        "            x = torch.cat((skip_conn, x), dim=1)\n",
        "            x = self.ups[idx+1](x)\n",
        "        return self.final_conv(x)\n"
      ],
      "metadata": {
        "id": "rHX9rNxRntCR"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch, time\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "model = UNet().to(device)\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n",
        "epochs = 1\n",
        "\n",
        "train_losses, val_losses = [], []\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    start_epoch = time.time()\n",
        "    model.train()\n",
        "    running_loss = 0.0\n",
        "    for bi, (imgs, masks) in enumerate(train_loader):\n",
        "        batch_start = time.time()\n",
        "        imgs, masks = imgs.to(device), masks.to(device)\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(imgs)\n",
        "        loss = criterion(outputs, masks)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        running_loss += loss.item() * imgs.size(0)\n",
        "        if bi % 10 == 0:\n",
        "            print(f'Epoch {epoch+1} - Batch {bi}: batch time {(time.time()-batch_start):.2f}s, batch loss={loss.item():.4f}')\n",
        "\n",
        "    train_loss = running_loss / len(train_loader.dataset)\n",
        "    train_losses.append(train_loss)\n",
        "\n",
        "    # Validation\n",
        "    model.eval()\n",
        "    val_loss = 0.0\n",
        "    with torch.no_grad():\n",
        "        for vbi, (imgs, masks) in enumerate(val_loader):\n",
        "            imgs, masks = imgs.to(device), masks.to(device)\n",
        "            outputs = model(imgs)\n",
        "            loss = criterion(outputs, masks)\n",
        "            val_loss += loss.item() * imgs.size(0)\n",
        "            if vbi==0:\n",
        "                print(f\"Validation batch shape: {imgs.shape}\")\n",
        "    val_loss = val_loss / len(val_loader.dataset)\n",
        "    val_losses.append(val_loss)\n",
        "    print(f\"Epoch {epoch+1}: Train Loss={train_loss:.4f} Val Loss={val_loss:.4f}\")\n",
        "    print(f\"Epoch {epoch+1} time: {(time.time()-start_epoch)/60:.2f} min\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_i0oAEw7oIMY",
        "outputId": "65947385-e5c2-4761-c89f-de12046371ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1 - Batch 0: batch time 107.24s, batch loss=0.8786\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "fJ8HVsfouTr4"
      }
    }
  ]
}